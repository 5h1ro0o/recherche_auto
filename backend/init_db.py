#!/usr/bin/env python3
"""
Script d'initialisation de la base de donn√©es
Cr√©e l'index Elasticsearch et ajoute des donn√©es de test
"""
import os
import sys
from elasticsearch import Elasticsearch
from datetime import datetime

# Configuration
ELASTIC_HOST = os.getenv("ELASTIC_HOST", "http://127.0.0.1:9200")
ES_INDEX = os.getenv("ES_INDEX", "vehicles")

# Donn√©es de test
SAMPLE_VEHICLES = [
    {
        "title": "Peugeot 208 Active 1.2 PureTech",
        "make": "Peugeot",
        "model": "208",
        "year": 2020,
        "price": 14500,
        "mileage": 35000,
        "fuel_type": "Essence",
        "transmission": "Manuelle",
        "location": "Paris",
        "seller_type": "PRO",
        "description": "Magnifique Peugeot 208 en excellent √©tat. Premi√®re main, entretien complet chez le concessionnaire.",
        "source": "test_data",
        "url": "http://example.com/vehicle/1",
        "created_at": datetime.now().isoformat(),
    },
    {
        "title": "Renault Clio V TCe 90",
        "make": "Renault",
        "model": "Clio",
        "year": 2021,
        "price": 16900,
        "mileage": 28000,
        "fuel_type": "Essence",
        "transmission": "Manuelle",
        "location": "Lyon",
        "seller_type": "PRO",
        "description": "Renault Clio r√©cente, tr√®s bien entretenue. Garantie constructeur restante.",
        "source": "test_data",
        "url": "http://example.com/vehicle/2",
        "created_at": datetime.now().isoformat(),
    },
    {
        "title": "Volkswagen Golf 7 TDI 115",
        "make": "Volkswagen",
        "model": "Golf",
        "year": 2019,
        "price": 18500,
        "mileage": 62000,
        "fuel_type": "Diesel",
        "transmission": "Manuelle",
        "location": "Marseille",
        "seller_type": "PRO",
        "description": "Golf 7 diesel, id√©ale pour les gros rouleurs. GPS, climatisation automatique.",
        "source": "test_data",
        "url": "http://example.com/vehicle/3",
        "created_at": datetime.now().isoformat(),
    },
    {
        "title": "BMW S√©rie 3 320d 190ch",
        "make": "BMW",
        "model": "S√©rie 3",
        "year": 2018,
        "price": 25900,
        "mileage": 78000,
        "fuel_type": "Diesel",
        "transmission": "Automatique",
        "location": "Bordeaux",
        "seller_type": "PRO",
        "description": "BMW S√©rie 3 berline sport, bo√Æte automatique, cuir, toit ouvrant.",
        "source": "test_data",
        "url": "http://example.com/vehicle/4",
        "created_at": datetime.now().isoformat(),
    },
    {
        "title": "Citro√´n C3 PureTech 82",
        "make": "Citro√´n",
        "model": "C3",
        "year": 2020,
        "price": 12900,
        "mileage": 41000,
        "fuel_type": "Essence",
        "transmission": "Manuelle",
        "location": "Toulouse",
        "seller_type": "PARTICULIER",
        "description": "Citro√´n C3 confortable, premi√®re main, carnet d'entretien √† jour.",
        "source": "test_data",
        "url": "http://example.com/vehicle/5",
        "created_at": datetime.now().isoformat(),
    },
    {
        "title": "Audi A4 2.0 TDI 150",
        "make": "Audi",
        "model": "A4",
        "year": 2017,
        "price": 22500,
        "mileage": 95000,
        "fuel_type": "Diesel",
        "transmission": "Automatique",
        "location": "Nantes",
        "seller_type": "PRO",
        "description": "Audi A4 break, spacieuse et √©l√©gante. Int√©rieur cuir, pack LED.",
        "source": "test_data",
        "url": "http://example.com/vehicle/6",
        "created_at": datetime.now().isoformat(),
    },
    {
        "title": "Mercedes Classe A 180d AMG Line",
        "make": "Mercedes",
        "model": "Classe A",
        "year": 2019,
        "price": 27900,
        "mileage": 52000,
        "fuel_type": "Diesel",
        "transmission": "Automatique",
        "location": "Lille",
        "seller_type": "PRO",
        "description": "Mercedes Classe A finition AMG Line, √©cran MBUX, syst√®me audio premium.",
        "source": "test_data",
        "url": "http://example.com/vehicle/7",
        "created_at": datetime.now().isoformat(),
    },
    {
        "title": "Ford Fiesta 1.0 EcoBoost 100",
        "make": "Ford",
        "model": "Fiesta",
        "year": 2021,
        "price": 14900,
        "mileage": 22000,
        "fuel_type": "Essence",
        "transmission": "Manuelle",
        "location": "Strasbourg",
        "seller_type": "PARTICULIER",
        "description": "Ford Fiesta r√©cente, moteur EcoBoost performant et √©conomique.",
        "source": "test_data",
        "url": "http://example.com/vehicle/8",
        "created_at": datetime.now().isoformat(),
    },
    {
        "title": "Toyota Yaris Hybrid 116h",
        "make": "Toyota",
        "model": "Yaris",
        "year": 2020,
        "price": 17500,
        "mileage": 38000,
        "fuel_type": "Hybride",
        "transmission": "Automatique",
        "location": "Nice",
        "seller_type": "PRO",
        "description": "Toyota Yaris hybride, √©conomique et fiable. Garantie constructeur restante.",
        "source": "test_data",
        "url": "http://example.com/vehicle/9",
        "created_at": datetime.now().isoformat(),
    },
    {
        "title": "Dacia Sandero TCe 90",
        "make": "Dacia",
        "model": "Sandero",
        "year": 2021,
        "price": 11900,
        "mileage": 18000,
        "fuel_type": "Essence",
        "transmission": "Manuelle",
        "location": "Rennes",
        "seller_type": "PARTICULIER",
        "description": "Dacia Sandero r√©cente, excellent rapport qualit√©/prix. Id√©ale premier v√©hicule.",
        "source": "test_data",
        "url": "http://example.com/vehicle/10",
        "created_at": datetime.now().isoformat(),
    },
]

# Mapping pour l'index
INDEX_MAPPING = {
    "mappings": {
        "properties": {
            "title": {"type": "text", "analyzer": "french"},
            "make": {"type": "keyword"},
            "model": {"type": "keyword"},
            "year": {"type": "integer"},
            "price": {"type": "float"},
            "mileage": {"type": "integer"},
            "fuel_type": {"type": "keyword"},
            "transmission": {"type": "keyword"},
            "location": {"type": "text"},
            "seller_type": {"type": "keyword"},
            "description": {"type": "text", "analyzer": "french"},
            "source": {"type": "keyword"},
            "url": {"type": "keyword"},
            "created_at": {"type": "date"},
        }
    }
}


def main():
    print("üöÄ Initialisation de la base de donn√©es...")
    print(f"üì° Connexion √† Elasticsearch: {ELASTIC_HOST}")

    # Connexion √† Elasticsearch
    try:
        es = Elasticsearch(hosts=[ELASTIC_HOST])

        # V√©rifier la connexion
        if not es.ping():
            print("‚ùå Impossible de se connecter √† Elasticsearch")
            print("üí° Assurez-vous que Elasticsearch est d√©marr√©:")
            print("   cd infra && docker-compose up -d elasticsearch")
            sys.exit(1)

        print("‚úÖ Connexion √† Elasticsearch r√©ussie")

    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        sys.exit(1)

    # Cr√©er l'index s'il n'existe pas
    print(f"\nüìä V√©rification de l'index '{ES_INDEX}'...")

    try:
        if es.indices.exists(index=ES_INDEX):
            print(f"‚ö†Ô∏è  L'index '{ES_INDEX}' existe d√©j√†")
            response = input("   Voulez-vous le recr√©er? (y/N): ")
            if response.lower() == 'y':
                es.indices.delete(index=ES_INDEX)
                print(f"üóëÔ∏è  Index '{ES_INDEX}' supprim√©")
            else:
                print("‚è≠Ô∏è  Conservation de l'index existant")
                return

        # Cr√©er l'index
        es.indices.create(index=ES_INDEX, body=INDEX_MAPPING)
        print(f"‚úÖ Index '{ES_INDEX}' cr√©√© avec succ√®s")

    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'index: {e}")
        sys.exit(1)

    # Indexer les donn√©es de test
    print(f"\nüìù Indexation de {len(SAMPLE_VEHICLES)} v√©hicules de test...")

    indexed_count = 0
    for i, vehicle in enumerate(SAMPLE_VEHICLES, 1):
        try:
            es.index(index=ES_INDEX, id=f"test_{i}", document=vehicle)
            indexed_count += 1
            print(f"   ‚úì {vehicle['title']}")
        except Exception as e:
            print(f"   ‚úó Erreur pour {vehicle['title']}: {e}")

    # Rafra√Æchir l'index
    es.indices.refresh(index=ES_INDEX)

    print(f"\n‚úÖ {indexed_count}/{len(SAMPLE_VEHICLES)} v√©hicules index√©s avec succ√®s!")

    # Afficher les statistiques
    try:
        count = es.count(index=ES_INDEX)
        print(f"\nüìä Statistiques:")
        print(f"   ‚Ä¢ Total de v√©hicules dans l'index: {count['count']}")

        # Test de recherche
        result = es.search(
            index=ES_INDEX,
            body={"query": {"match_all": {}}, "size": 3}
        )
        print(f"\nüîç Exemple de recherche (3 premiers r√©sultats):")
        for hit in result['hits']['hits']:
            doc = hit['_source']
            print(f"   ‚Ä¢ {doc['title']} - {doc['price']}‚Ç¨ - {doc['location']}")

    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors de la r√©cup√©ration des stats: {e}")

    print("\n" + "="*60)
    print("‚úÖ Initialisation termin√©e avec succ√®s!")
    print("="*60)
    print("\nüí° Prochaines √©tapes:")
    print("   1. D√©marrez le backend: uvicorn app.main:app --reload")
    print("   2. D√©marrez le frontend: cd frontend && npm run dev")
    print("   3. Testez la recherche: http://localhost:5173")
    print("\nüìö Pour lancer les scrapers r√©els:")
    print("   python app/worker.py --run-worker")
    print()


if __name__ == "__main__":
    main()
