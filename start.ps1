# Script de d√©marrage pour l'application Recherche Auto
# Usage: .\start.ps1

Write-Host "üöÄ D√©marrage de l'application Recherche Auto..." -ForegroundColor Cyan
Write-Host ""

# V√©rifier que Docker Desktop est lanc√©
Write-Host "üê≥ V√©rification de Docker..." -ForegroundColor Yellow
$dockerRunning = docker ps 2>&1
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Docker Desktop n'est pas lanc√©!" -ForegroundColor Red
    Write-Host "üí° Lancez Docker Desktop et r√©essayez." -ForegroundColor Yellow
    exit 1
}
Write-Host "‚úÖ Docker est lanc√©" -ForegroundColor Green

# D√©marrer les services Docker
Write-Host ""
Write-Host "üì¶ D√©marrage des services (PostgreSQL, Elasticsearch, Redis)..." -ForegroundColor Yellow
Set-Location -Path "$PSScriptRoot\infra"
docker-compose up -d

# Attendre que les services soient pr√™ts
Write-Host ""
Write-Host "‚è≥ Attente du d√©marrage des services (30 secondes)..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# V√©rifier l'√©tat des services
Write-Host ""
Write-Host "üîç V√©rification de l'√©tat des services..." -ForegroundColor Yellow
docker-compose ps

# V√©rifier Elasticsearch
Write-Host ""
Write-Host "üîç Test de connexion √† Elasticsearch..." -ForegroundColor Yellow
try {
    $esResponse = Invoke-WebRequest -Uri "http://localhost:9200" -UseBasicParsing -TimeoutSec 5
    if ($esResponse.StatusCode -eq 200) {
        Write-Host "‚úÖ Elasticsearch est accessible" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è  Elasticsearch n'est pas encore pr√™t" -ForegroundColor Yellow
}

# V√©rifier PostgreSQL
Write-Host ""
Write-Host "üêò Test de connexion √† PostgreSQL..." -ForegroundColor Yellow
$pgTest = docker exec recherche_auto-postgres-1 psql -U app -d vehicles -c "SELECT 1" 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ PostgreSQL est accessible" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  PostgreSQL n'est pas encore pr√™t (c'est normal au premier lancement)" -ForegroundColor Yellow
}

# Cr√©er les tables si n√©cessaire
Write-Host ""
Write-Host "üìä Cr√©ation des tables de la base de donn√©es..." -ForegroundColor Yellow
Set-Location -Path "$PSScriptRoot\backend"

# V√©rifier que l'environnement virtuel existe
if (-Not (Test-Path ".venv")) {
    Write-Host "‚ö†Ô∏è  Environnement virtuel Python non trouv√©" -ForegroundColor Yellow
    Write-Host "üí° Cr√©ez-le avec: python -m venv .venv" -ForegroundColor Yellow
} else {
    # Activer l'environnement virtuel et cr√©er les tables
    & ".venv\Scripts\Activate.ps1"

    Write-Host "üîß Cr√©ation des tables..." -ForegroundColor Yellow
    python -c "from app.db import Base, engine; Base.metadata.create_all(bind=engine); print('‚úÖ Tables cr√©√©es ou d√©j√† existantes!')"

    # V√©rifier si l'index Elasticsearch existe
    Write-Host ""
    Write-Host "üîç V√©rification de l'index Elasticsearch..." -ForegroundColor Yellow
    try {
        $indexCheck = Invoke-WebRequest -Uri "http://localhost:9200/vehicles/_count" -UseBasicParsing -TimeoutSec 5
        $countData = $indexCheck.Content | ConvertFrom-Json
        if ($countData.count -eq 0) {
            Write-Host "‚ö†Ô∏è  L'index Elasticsearch est vide" -ForegroundColor Yellow
            Write-Host "üí° Initialisez-le avec: python init_db.py" -ForegroundColor Yellow
        } else {
            Write-Host "‚úÖ Index Elasticsearch contient $($countData.count) v√©hicules" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ö†Ô∏è  L'index Elasticsearch n'existe pas encore" -ForegroundColor Yellow
        Write-Host "üí° Cr√©ez-le avec: python init_db.py" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "=" -repeat 60 -ForegroundColor Cyan
Write-Host "‚úÖ Services d√©marr√©s avec succ√®s!" -ForegroundColor Green
Write-Host "=" -repeat 60 -ForegroundColor Cyan
Write-Host ""
Write-Host "üìö Prochaines √©tapes:" -ForegroundColor Yellow
Write-Host ""
Write-Host "1. Initialiser la base de donn√©es (si pas d√©j√† fait):" -ForegroundColor White
Write-Host "   cd backend" -ForegroundColor Gray
Write-Host "   .venv\Scripts\Activate.ps1" -ForegroundColor Gray
Write-Host "   python init_db.py" -ForegroundColor Gray
Write-Host ""
Write-Host "2. D√©marrer le backend:" -ForegroundColor White
Write-Host "   cd backend" -ForegroundColor Gray
Write-Host "   .venv\Scripts\Activate.ps1" -ForegroundColor Gray
Write-Host "   uvicorn app.main:app --reload --host 0.0.0.0 --port 8000" -ForegroundColor Gray
Write-Host ""
Write-Host "3. D√©marrer le frontend (nouveau terminal):" -ForegroundColor White
Write-Host "   cd frontend" -ForegroundColor Gray
Write-Host "   npm run dev" -ForegroundColor Gray
Write-Host ""
Write-Host "4. Acc√©der √† l'application:" -ForegroundColor White
Write-Host "   Frontend: http://localhost:5173" -ForegroundColor Cyan
Write-Host "   Backend API: http://localhost:8000/docs" -ForegroundColor Cyan
Write-Host ""
Write-Host "üõë Pour arr√™ter les services:" -ForegroundColor Yellow
Write-Host "   cd infra && docker-compose down" -ForegroundColor Gray
Write-Host ""
